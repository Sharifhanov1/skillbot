import requests
import os
from telegram import InputMediaPhoto

# –ö–ª—é—á–∏ API –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
OPENWEATHER_API_KEY = os.getenv("OPENWEATHER_API_KEY")
UNSPLASH_API_KEY = os.getenv("UNSPLASH_API_KEY")

async def get_weather(city: str):
    try:
        weather_url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OPENWEATHER_API_KEY}&units=metric&lang=ru"
        weather_response = requests.get(weather_url)
        weather_data = weather_response.json()

        if weather_data.get("cod") != 200:
            return "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."

        temperature = weather_data["main"]["temp"]
        feels_like = weather_data["main"]["feels_like"]
        humidity = weather_data["main"]["humidity"]
        wind_speed = weather_data["wind"]["speed"]
        weather_description = weather_data["weather"][0]["description"]
        city_name = weather_data["name"]
        country = weather_data["sys"]["country"]

        weather_info = (
            f"üåç –ú–µ—Å—Ç–æ: {city_name}, {country}\n"
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"üå¨Ô∏è –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å\n"
            f"‚òÅÔ∏è –ü–æ–≥–æ–¥–∞: {weather_description.capitalize()}"
        )

        photo_url = await get_place_photo(city_name)
        return weather_info, photo_url

    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ: {e}", None

async def get_place_photo(city: str):
    try:
        unsplash_url = f"https://api.unsplash.com/search/photos?query={city}&client_id={UNSPLASH_API_KEY}&per_page=1"
        unsplash_response = requests.get(unsplash_url)
        unsplash_data = unsplash_response.json()

        if unsplash_data.get("results"):
            return unsplash_data["results"][0]["urls"]["regular"]
        return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ: {e}")
        return None