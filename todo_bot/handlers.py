from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import ContextTypes, CallbackQueryHandler
from database import User, Task, initialize_db, get_db_connection
from datetime import datetime
import requests
import os
import logging
from dotenv import load_dotenv
from functools import wraps
import telegram
from peewee import DoesNotExist

logger = logging.getLogger(__name__)
load_dotenv()
initialize_db()


def db_connection_handler(func):
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        db = get_db_connection()
        try:
            return await func(update, context, *args, **kwargs)
        except Exception as e:
            logger.error(f"Database error: {e}", exc_info=True)
            if update and update.message:
                await update.message.reply_text(
                    "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=main_menu()
                )
        finally:
            if not db.is_closed():
                db.close()

    return wrapper


def update_user_activity(func):
    @wraps(func)
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        try:
            user, _ = User.get_or_create(
                user_id=update.effective_user.id,
                defaults={
                    'username': update.effective_user.username,
                    'first_name': update.effective_user.first_name,
                    'last_name': update.effective_user.last_name
                }
            )
            user.last_activity = datetime.now()
            user.save()
        except Exception as e:
            logger.error(f"User activity error: {e}")
        return await func(update, context, *args, **kwargs)

    return wrapper


def main_menu():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É"), KeyboardButton("üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏")],
        [KeyboardButton("‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ")],
        [KeyboardButton("üå§ –ü–æ–≥–æ–¥–∞"), KeyboardButton("üí± –ö—É—Ä—Å –≤–∞–ª—é—Ç")]
    ], resize_keyboard=True)


@update_user_activity
@db_connection_handler
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìù To-Do Bot\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )


@update_user_activity
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü–æ–º–æ—â—å:\n\n–§–æ—Ä–º–∞—Ç –∑–∞–¥–∞—á: <—Ç–µ–∫—Å—Ç>, <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>\n–ü—Ä–∏–º–µ—Ä: –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ, –ø—Ä–æ–¥—É–∫—Ç—ã",
        reply_markup=main_menu()
    )


@update_user_activity
@db_connection_handler
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == "üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        await add_task(update, context)
    elif text == "üìã –ú–æ–∏ –∑–∞–¥–∞—á–∏":
        await show_active_tasks(update, context)
    elif text == "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ":
        await show_completed_tasks(update, context)
    elif text == "üå§ –ü–æ–≥–æ–¥–∞":
        await ask_city(update, context)
    elif text == "üí± –ö—É—Ä—Å –≤–∞–ª—é—Ç":
        await show_currency(update, context)
    elif text == "–û—Ç–º–µ–Ω–∞":
        await cancel(update, context)
    elif context.user_data.get('awaiting_task'):
        await save_task(update, context)
    elif context.user_data.get('awaiting_city'):
        await show_weather(update, context)


async def add_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É:\n<—Ç–µ–∫—Å—Ç>, <–∫–∞—Ç–µ–≥–æ—Ä–∏—è>\n–ü—Ä–∏–º–µ—Ä: –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ, –ø—Ä–æ–¥—É–∫—Ç—ã",
        reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
    )
    context.user_data['awaiting_task'] = True


@update_user_activity
@db_connection_handler
async def save_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await cancel(update, context)
        return

    try:
        text, category = map(str.strip, update.message.text.split(",", 1))

        if not text or not category:
            raise ValueError("–ü—É—Å—Ç—ã–µ –ø–æ–ª—è –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è")

        user = User.get(User.user_id == update.effective_user.id)
        Task.create(user=user, text=text, category=category)

        await update.message.reply_text(
            f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {text} ({category})",
            reply_markup=main_menu()
        )
    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: –ö—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ, –ø—Ä–æ–¥—É–∫—Ç—ã",
            reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á—É",
            reply_markup=main_menu()
        )
    finally:
        context.user_data.pop('awaiting_task', None)


@update_user_activity
@db_connection_handler
async def show_active_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = User.get(User.user_id == update.effective_user.id)
        tasks = Task.select().where(
            (Task.user == user) &
            (Task.is_done == False)
        ).order_by(Task.created_at.desc())

        if not tasks.count():
            await update.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á", reply_markup=main_menu())
            return

        keyboard = [
            [InlineKeyboardButton(
                f"{task.text} ({task.category})",
                callback_data=f"complete_{task.id}"
            )]
            for task in tasks
        ]

        await update.message.reply_text(
            "üìã –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except DoesNotExist:
        await update.message.reply_text("üì≠ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á", reply_markup=main_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∑–∞–¥–∞—á: {e}")
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏",
            reply_markup=main_menu()
        )


@update_user_activity
@db_connection_handler
async def show_completed_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = User.get(User.user_id == update.effective_user.id)
        tasks = Task.select().where(
            (Task.user == user) &
            (Task.is_done == True)
        ).order_by(Task.completed_at.desc())

        if not tasks.count():
            await update.message.reply_text("üì≠ –ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á", reply_markup=main_menu())
            return

        message = "‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n\n" + "\n".join(
            f"‚Ä¢ {task.text} ({task.category}) - {task.completed_at.strftime('%d.%m.%Y') if task.completed_at else '??.??.????'}"
            for task in tasks
        )

        await update.message.reply_text(message, reply_markup=main_menu())
    except DoesNotExist:
        await update.message.reply_text("üì≠ –ù–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á", reply_markup=main_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á: {e}")
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏",
            reply_markup=main_menu()
        )


@update_user_activity
@db_connection_handler
async def complete_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()

        task_id = int(query.data.split('_')[1])
        task = Task.get(Task.id == task_id)

        task.is_done = True
        task.completed_at = datetime.now()
        task.save()

        await query.edit_message_text(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {task.text}")
    except DoesNotExist:
        await query.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")


async def ask_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üå§ –í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã:",
        reply_markup=ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True)
    )
    context.user_data['awaiting_city'] = True


@update_user_activity
async def show_weather(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.lower() == "–æ—Ç–º–µ–Ω–∞":
        await cancel(update, context)
        return

    city = update.message.text
    try:
        api_key = os.getenv('WEATHER_API_KEY')
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric&lang=ru"
        response = requests.get(url)
        data = response.json()

        if data.get('cod') != 200:
            raise ValueError(data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ API'))

        weather_info = (
            f"üå§ –ü–æ–≥–æ–¥–∞ –≤ {data['name']}:\n"
            f"‚Ä¢ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {data['main']['temp']}¬∞C\n"
            f"‚Ä¢ –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {data['main']['feels_like']}¬∞C\n"
            f"‚Ä¢ –í–ª–∞–∂–Ω–æ—Å—Ç—å: {data['main']['humidity']}%\n"
            f"‚Ä¢ –í–µ—Ç–µ—Ä: {data['wind']['speed']} –º/—Å\n"
            f"‚Ä¢ {data['weather'][0]['description'].capitalize()}"
        )

        await update.message.reply_text(weather_info, reply_markup=main_menu())
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–≥–æ–¥–Ω–æ–≥–æ API: {e}")
        await update.message.reply_text(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–≥–æ–¥—É. –û—à–∏–±–∫–∞: {str(e)}",
            reply_markup=main_menu()
        )
    finally:
        context.user_data.pop('awaiting_city', None)


@update_user_activity
async def show_currency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        response = requests.get('https://www.cbr-xml-daily.ru/daily_json.js')
        data = response.json()

        usd = data['Valute']['USD']['Value']
        eur = data['Valute']['EUR']['Value']

        await update.message.reply_text(
            f"üí± –ö—É—Ä—Å –≤–∞–ª—é—Ç:\n\nUSD: {usd:.2f}‚ÇΩ\nEUR: {eur:.2f}‚ÇΩ",
            reply_markup=main_menu()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç: {e}")
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –≤–∞–ª—é—Ç",
            reply_markup=main_menu()
        )


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    context.user_data.clear()


async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    error = context.error
    logger.error(f"Global error: {error}", exc_info=True)

    if isinstance(error, telegram.error.Forbidden):
        logger.warning("User blocked the bot")
        return
    elif isinstance(error, telegram.error.NetworkError):
        logger.warning("Network issues")
        return

    if update and update.effective_message:
        try:
            await update.effective_message.reply_text(
                "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=main_menu()
            )
        except Exception as e:
            logger.error(f"Failed to send error message: {e}")